[build-system]
requires = [
    "setuptools>=61.0",
    "wheel>=0.37.0"
]
build-backend = "setuptools.build_meta"

[project]
name = "vecclean"
version = "1.0.0.1"
description = "Production-ready text cleaning, deduplication, and vectorization pipeline with C++ acceleration"
authors = [
    {name = "Shlok Mundhra", email = "shlokmundhra1111@gmail.com"},
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["text-processing", "vectorization", "deduplication", "nlp", "embeddings", "fastapi"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    # Core dependencies
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "click>=8.1.0",
    "rich>=13.6.0",
    "typer>=0.9.0",
    "httpx>=0.25.0",
    "zstandard>=0.21.0",
    
    # Async and concurrency
    "aiofiles>=23.2.0",
    "asyncio-throttle>=1.0.2",
    
    # Text processing and ML
    "sentence-transformers>=2.2.0",
    "transformers>=4.30.0",
    "torch>=2.0.0,!=2.2.0",
    "numpy>=1.22.0,<2.0.0",
    
    # File format support
    "PyPDF2>=3.0.0",
    "pdfplumber>=0.9.0",
    "python-docx>=0.8.11",
    "python-pptx>=0.6.21",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    
    # Tokenization
    "tiktoken>=0.5.0",
    "transformers>=4.30.0",
    
    # Database support (optional)
    "aiosqlite>=0.19.0",
    "asyncpg>=0.28.0",
    
    # Enhanced utilities
    "aioredis>=2.0.0",
    "PyJWT>=2.8.0",
    "python-multipart>=0.0.6",
    
    # Data handling
    "pandas>=2.1.0",
    "pyarrow>=13.0.0",
    "xxhash>=3.4.0",
    
    # Configuration and monitoring
    "PyYAML>=6.0.1",
    "watchdog>=3.0.0",
    "psutil>=5.9.0",
    
    # Compression support
    "lz4>=4.3.0",
    "zstandard>=0.21.0",
    "brotli>=1.1.0",
    
    # Cloud storage (optional)
    "aioboto3>=12.0.0; extra == 'aws'",
    "google-cloud-storage>=2.10.0; extra == 'gcp'",
    "azure-storage-blob>=12.19.0; extra == 'azure'",
    "azure-identity>=1.15.0; extra == 'azure'",
]

[project.optional-dependencies]
# Cloud storage support
aws = ["aioboto3>=12.0.0"]
gcp = ["google-cloud-storage>=2.10.0"]
azure = ["azure-storage-blob>=12.19.0", "azure-identity>=1.15.0"]
cloud = ["aioboto3>=12.0.0", "google-cloud-storage>=2.10.0", "azure-storage-blob>=12.19.0", "azure-identity>=1.15.0"]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]

# All optional dependencies
all = [
    "aioboto3>=12.0.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0", 
    "azure-identity>=1.15.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/vecclean/vecclean"
Documentation = "https://vecclean.readthedocs.io"
Repository = "https://github.com/vecclean/vecclean"
Issues = "https://github.com/vecclean/vecclean/issues"
Changelog = "https://github.com/vecclean/vecclean/blob/main/CHANGELOG.md"

[project.scripts]
# Command-line interface
vecclean = "vecclean.cli:main"
cleanvec = "vecclean.cli:main"

[project.entry-points."vecclean.processors"]
# Plugin system for custom processors
default = "vecclean.core.pipeline:ProcessingPipeline"



[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sentence_transformers.*",
    "transformers.*",
    "torch.*",
    "PyPDF2.*",
    "pdfplumber.*",
    "docx.*",
    "pptx.*",
    "bs4.*",
    "lxml.*",
    "xxhash.*",
    "lz4.*",
    "zstandard.*",
    "brotli.*",
    "aioboto3.*",
    "google.cloud.*",
    "azure.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["S101"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
vecclean = ["configs/*.yaml", "configs/*.txt"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 